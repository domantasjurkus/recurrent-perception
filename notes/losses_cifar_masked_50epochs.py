import numpy as np
import matplotlib.pyplot as plt

'''
Correct predictions: [860, 721, 868, 1010]
Total test samples:  [1564, 1622, 1489, 1655]
Test accuracy: 54 %
tensor([[  860,   224,   234,   246],
        [  230,   721,   168,   503],
        [  136,   106,   868,   379],
        [  113,   210,   322,  1010]], dtype=torch.int32)
Finished Training
Training losses: [110.90111124515533, 110.62715935707092, 107.58327925205231, 102.01158940792084, 98.35872328281403, 95.95778858661652, 93.70145601034164, 92.68032658100128, 92.14402902126312, 90.45492213964462, 90.36298257112503, 88.83806091547012, 88.68030422925949, 87.98248165845871, 87.46182757616043, 87.85202836990356, 86.73561406135559, 85.81330543756485, 85.35478174686432, 84.50118619203568, 84.52246618270874, 83.81526976823807, 84.08420670032501, 84.27772378921509, 83.42728120088577, 83.0399979352951, 82.92481499910355, 82.49716448783875, 81.80809450149536, 82.2120965719223, 81.43122488260269, 81.40342968702316, 81.09967124462128, 80.32569986581802, 80.72787421941757, 80.88764703273773, 79.67666965723038, 79.61459738016129, 80.2127326130867, 80.57788091897964, 79.67920309305191, 79.5377385020256, 79.02457511425018, 78.76243245601654, 79.21667039394379, 78.9834104180336, 78.85640871524811, 78.0195854306221, 78.24364334344864, 78.07748663425446]
Testing losses: [137.0984147787094, 135.97530829906464, 129.85187429189682, 123.29896014928818, 119.31984674930573, 117.00682717561722, 114.45357471704483, 113.56181615591049, 112.14779758453369, 112.64417338371277, 110.59233438968658, 109.16442048549652, 109.13771319389343, 108.52627468109131, 107.62116530537605, 106.89854407310486, 106.08016464114189, 104.7927251458168, 107.83292600512505, 105.0410248041153, 103.62898290157318, 105.19665956497192, 104.6934220790863, 103.71950858831406, 102.26945054531097, 101.7951232790947, 102.8017891049385, 101.32659184932709, 100.97904258966446, 100.8502294421196, 100.8484135568142, 99.20868560671806, 100.15135931968689, 102.6856644153595, 100.01024493575096, 99.13704365491867, 99.24138072133064, 98.88311785459518, 98.28108429908752, 99.00803649425507, 99.92755073308945, 98.44695204496384, 100.86312714219093, 98.17890650033951, 98.86462932825089, 101.19275760650635, 96.80812340974808, 98.16050004959106, 96.61439579725266, 98.14799457788467]
'''

confusion = np.array([
    [860,   224,   234,   246],
    [230,   721,   168,   503],
    [136,   106,   868,   379],
    [113,   210,   322,  1010]
])

def confusion_matrix(confusion):
    # Set up plot
    fig = plt.figure()
    ax = fig.add_subplot(111)
    cax = ax.matshow(confusion.numpy())
    fig.colorbar(cax)

    # Set up axes
    ax.set_xticklabels([''] + all_categories, rotation=90)
    ax.set_yticklabels([''] + all_categories)

    # Force label at every tick
    ax.xaxis.set_major_locator(ticker.MultipleLocator(1))
    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))

    # sphinx_gallery_thumbnail_number = 2
    plt.show()

confusion_matrix(confusion)